type: edu
files:
  - name: src/carsharing/Main.java
    visible: true
    text: |-
      package carsharing;
      
      public class Main {
      
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/CarSharingTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.BeforeClass;
      
      import java.io.File;
      
      public class CarSharingTest extends StageTest<Void> {
      
          private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
          private static DatabaseUtil db = new DatabaseUtil();
      
          @BeforeClass
          public static void deleteDatabaseFile() {
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return;
              }
      
              if (!file.delete()) {
                  throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                      "Make sure you close all the connections with the database file!");
              }
          }
      
          @DynamicTest(order = -1)
          public CheckResult test2_ifDatabaseExist() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              program.execute("0");
      
              if (!program.isFinished()) {
                  return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
              }
      
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                      " and located in /carsharing/db/ folder.\n" +
                      "The file should be created right after starting the program!");
              }
      
              return correct();
          }
      
          @DynamicTest
          public CheckResult test1_testMenu() {
              TestedProgram program = new TestedProgram();
              String output = program.start("-databaseFileName", "carsharing");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("Start menu should contain \"0. Exit\"");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Company list")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
              }
      
              if (!output.contains("2. Create a company")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
              }
      
              if (!output.contains("0. Back")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("0");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          public CheckResult test3_checkDatabaseConnection() {
              db.getConnection();
              return correct();
          }
      
          @DynamicTest
          public CheckResult test4_checkIfTableExists() {
              if (!db.ifTableExist("company")) {
                  return wrong("Can't find table named 'company'");
              }
              if (!db.ifTableExist("car")) {
                  return wrong("Can't find table named 'car'");
              }
              return correct();
          }
      
          @DynamicTest
          public CheckResult test5_checkTableColumns() {
              String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
              db.ifColumnsExist("company", companyColumns);
              db.checkCompanyColumnProperties();
      
              String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
              db.ifColumnsExist("car", carColumns);
              db.checkCarColumnProperties();
              return correct();
          }
      
          @DynamicTest
          public CheckResult test6_testAddCompany() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
      
              db.clearCarTable();
              db.clearCompanyTable();
      
              program.execute("1");
              String output = program.execute("1");
      
              if (!output.contains("The company list is empty")) {
                  return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the company name")) {
                  return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                      "Your output should contain 'Enter the company name:'");
              }
      
              program.execute("Super company");
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Super company'");
              }
      
              db.checkCompany("Super company");
      
              program.execute("0\n2\nAnother company");
              program.execute("2\nOne more company");
      
              db.checkCompany("Another company");
              db.checkCompany("One more company");
      
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Super company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Another company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '2. Another company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("3. One more company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '2. Another company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              program.execute("2");
      
              return correct();
          }
      
          @DynamicTest
          public CheckResult test7_testAddCar() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              String output;
      
              db.clearCarTable();
              db.clearCompanyTable();
      
              program.execute("1");
              program.execute("2");
              program.execute("Car To Go");
              program.execute("2");
              program.execute("Drive Now");
      
              db.checkCompany("Car To Go");
              db.checkCompany("Drive Now");
      
              output = program.execute("1");
      
              if (!output.contains("1. Car To Go")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Car To Go'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Drive Now")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '2. Drive Now'\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Car list")) {
                  return wrong("After choosing company you should print menu that contains '1. Car list' item");
              }
      
              if (!output.contains("2. Create a car")) {
                  return wrong("After choosing company you should print menu that contains '2. Create a car' item");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("After choosing company you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("1");
      
              if (!output.contains("The car list is empty!")) {
                  return wrong("If no cars were added to the company you should print 'The car list is empty!'");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the car name:")) {
                  return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                      "Your output should contain 'Enter the car name:'");
              }
      
              program.execute("Hyundai Venue");
              db.checkCar("Car To Go", "Hyundai Venue");
      
              program.execute("2");
              program.execute("Maruti Suzuki Dzire");
              db.checkCar("Car To Go", "Maruti Suzuki Dzire");
      
              output = program.execute("1");
      
              if (!output.contains("1. Hyundai Venue")) {
                  return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                      "Your output should contain '1. Hyundai Venue'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Maruti Suzuki Dzire")) {
                  return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                      "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              program.execute("0");
      
              program.execute("1");
              program.execute("2");
      
              output = program.execute("1");
      
              if (!output.contains("The car list is empty!")) {
                  return wrong("If no cars were added to the company you should print 'The car list is empty!'");
              }
      
              program.execute("2");
              program.execute("Lamborghini Urraco");
      
              output = program.execute("1");
      
              if (!output.contains("1. Lamborghini Urraco")) {
                  return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                      "Your output should contain '1. Lamborghini Urraco'");
              }
      
              if (output.contains("Hyundai Venue")) {
                  return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
              }
      
              if (output.contains("Maruti Suzuki Dzire")) {
                  return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
              }
      
              db.checkCar("Drive Now", "Lamborghini Urraco");
      
              program.execute("0");
              program.execute("0");
              program.execute("0");
      
              return correct();
          }
      
          private CheckResult wrong(String message) {
              db.closeConnection();
              return CheckResult.wrong(message);
          }
      
          private CheckResult correct() {
              db.closeConnection();
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: test/DatabaseUtil.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.sql.*;
      import java.util.HashMap;
      
      public class DatabaseUtil {
      
          private Connection connection = null;
          private static final String databaseFilePath = "./src/carsharing/db/carsharing";
      
          public Connection getConnection() {
              if (connection != null) {
                  return connection;
              }
              try {
                  connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't connect to the database.");
              }
              return connection;
          }
      
          public void closeConnection() {
              if (connection != null) {
                  try {
                      connection.close();
                  } catch (SQLException ignored) {
                      System.out.println(ignored.getErrorCode());
                      throw new WrongAnswer("Can't close connection to the database.");
                  }
                  connection = null;
              }
          }
      
          public ResultSet executeQuery(String query) {
              try {
                  return getConnection().createStatement().executeQuery(query);
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public boolean ifTableExist(String tableName) {
              try {
                  tableName = tableName.toUpperCase();
                  ResultSet resultSet = executeQuery("SHOW TABLES");
                  while (resultSet.next()) {
                      if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                          return true;
                      }
                  }
                  return false;
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void ifColumnsExist(String tableName, String[][] columns) {
              try {
                  ResultSet resultSet = getConnection()
                          .createStatement()
                          .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());
      
                  HashMap<String, String> correctColumns = new HashMap<>();
                  for (String[] column : columns) {
                      correctColumns.put(column[0], column[1]);
                  }
      
                  while (resultSet.next()) {
                      String columnName = resultSet.getString("FIELD");
                      if (correctColumns.containsKey(columnName)) {
                          if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                              throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                      + "' column should be of " + correctColumns.get(columnName) + " type.");
                          }
                          correctColumns.remove(columnName);
                      }
                  }
                  if (!correctColumns.isEmpty()) {
                      throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void clearCompanyTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM COMPANY");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the COMPANY table.");
              }
              try {
                  getConnection().createStatement().execute("ALTER TABLE COMPANY ALTER COLUMN id RESTART WITH 1");
              } catch (SQLException ex) {
                  throw new WrongAnswer("Can't reset the ID column in the COMPANY table. " +
                          "Make sure that this column is AUTO_INCREMENT");
              }
          }
      
          public void clearCarTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM CAR");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the CAR table.");
              }
              try {
                  getConnection().createStatement().execute("ALTER TABLE CAR ALTER COLUMN id RESTART WITH 1");
              } catch (SQLException ex) {
                  throw new WrongAnswer("Can't reset the ID column in the CAR table. " +
                          "Make sure that this column is AUTO_INCREMENT");
              }
          }
      
          public void checkCompany(String name) {
              try {
                  PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  preparedStatement.setString(1, name);
                  ResultSet resultSet = preparedStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table.");
                  }
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
              }
          }
      
          public void checkCar(String companyName, String carName) {
              try {
                  PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  companyStatement.setString(1, companyName);
      
                  PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                  carStatement.setString(1, carName);
      
                  ResultSet resultSet = companyStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                  }
      
                  int id = resultSet.getInt("ID");
      
                  resultSet = carStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.");
                  }
                  if (resultSet.getInt("COMPANY_ID") != id) {
                      throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' ID.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCompanyColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCarColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                  }
      
                  if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      }
    learner_created: false
  - name: src/carsharing/db/Service/Impl/CompanyDAO.java
    visible: true
    text: |
      package carsharing.db.Service.Impl;
      
      import carsharing.db.Model.Company;
      import carsharing.db.Service.CarSharingService;
      
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.List;
      
      public class CompanyDAO implements CarSharingService {
      
          private static final String SELECT_ALL = "SELECT * FROM DEVELOPER";
      
          private static final String insert = "INSERT INTO COMPANY (NAME) VALUES (?)";
          private static Connection conn;
      
      
          @Override
          public List<Company> findAll(Statement stmt) {
              List<Company> companyList = new ArrayList<>();
              try {
                  String sql =  "SELECT * FROM COMPANY";
                  ResultSet resultSet = stmt.executeQuery(sql);
      
                  while(resultSet.next()) {
                      int id = resultSet.getInt("id");
                      String name = resultSet.getString("name");
                      companyList.add(new Company(name, id));
                      System.out.println(companyList);
                  }
              } catch (SQLException se) {
                  se.printStackTrace();
              }
              return companyList;
      
          }
      
          @Override
          public void add(String company) {
      
              try(PreparedStatement preparedStatement = conn.prepareStatement(insert)){
                  preparedStatement.setString(1, company);
                  preparedStatement.executeUpdate();
      
                  System.out.println("The company was created!");
              } catch (SQLException e) {
                  throw new RuntimeException(e);
              }
      
          }
      }
    learner_created: true
  - name: src/carsharing/db/Model/Company.java
    visible: true
    text: |
      package carsharing.db.Model;
      
      public class Company {
          private String name;
          private int id;
      
          public Company(String name, int id) {
              this.name = name;
              this.id = id;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public int getId() {
              return id;
          }
      
          public void setId(int id) {
              this.id = id;
          }
      
      
          @Override
          public String toString() {
              return id + ". "+ name;
      
          }
      }
    learner_created: true
  - name: src/carsharing/db/carsharing.trace.db
    visible: true
    text: "2023-11-02 21:47:55 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"CREATE TABLE   COMPANY (ID INTEGER,  NAME VARCHAR(255)\
    \ [*]\"; expected \"FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT,\
    \ GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT,\
    \ SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, COMMENT,\
    \ CHECK, REFERENCES, ,, )\"; SQL statement:\nCREATE TABLE   COMPANY (ID INTEGER,\
    \  NAME VARCHAR(255)  [42001-200]\n2023-11-02 21:47:55 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"CREATE TABLE   COMPANY (ID INTEGER,  NAME VARCHAR(255)\
    \ [*]\"; expected \"FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT,\
    \ GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT,\
    \ SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, COMMENT,\
    \ CHECK, REFERENCES, ,, )\"; SQL statement:\nCREATE TABLE   COMPANY (ID INTEGER,\
    \  NAME VARCHAR(255)  [42001-200]\n2023-11-02 21:48:50 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"CREATE TABLE   COMPANY (ID INTEGER,  NAME VARCHAR(255)\
    \ [*]\"; expected \"FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT,\
    \ GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT,\
    \ SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, COMMENT,\
    \ CHECK, REFERENCES, ,, )\"; SQL statement:\nCREATE TABLE   COMPANY (ID INTEGER,\
    \  NAME VARCHAR(255)  [42001-200]\n2023-11-02 21:48:50 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"CREATE TABLE   COMPANY (ID INTEGER,  NAME VARCHAR(255)\
    \ [*]\"; expected \"FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT,\
    \ GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT,\
    \ SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, COMMENT,\
    \ CHECK, REFERENCES, ,, )\"; SQL statement:\nCREATE TABLE   COMPANY (ID INTEGER,\
    \  NAME VARCHAR(255)  [42001-200]\n2023-11-02 21:48:50 jdbc[5]: null\norg.h2.message.DbException:\
    \ The connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\
    \tat org.h2.Driver.connect(Driver.java:69)\n\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\t\
    at DatabaseUtil.getConnection(DatabaseUtil.java:19)\n\tat CarSharingTest.test2_checkDatabaseConnection(CarSharingTest.java:74)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.common.ReflectionUtils.invokeMethod(ReflectionUtils.java:92)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$searchDynamicTests$2(DynamicTesting.java:284)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$getTests$0(DynamicTesting.java:252)\n\
    \tat org.hyperskill.hstest.testing.runner.AsyncDynamicTestingRunner.lambda$runMain$0(AsyncDynamicTestingRunner.java:45)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException:\
    \ The connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:622)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t...\
    \ 23 more\n2023-11-12 19:35:47 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE {table_name} MODIFY ID INT NOT NULL\
    \ AUTO_INCREMENT, ADD PRIMARY KEY (ID), MODIFY NAME {data_type} NOT NULL, ADD\
    \ CONSTRAINT UNIQUE_NAME UNIQUE (NAME[*])\" [42000-200]\n2023-11-12 19:37:11 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement\
    \ \"ALTER TABLE COMPANY MODIFY ID INT NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY\
    \ (ID), MODIFY NAME {data_type} NOT NULL, ADD CONSTRAINT UNIQUE_NAME UNIQUE (NAME[*])\"\
    \ [42000-200]\n2023-11-12 19:37:58 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY MODIFY[*] ID INT NOT NULL\
    \ AUTO_INCREMENT, ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL, ADD\
    \ CONSTRAINT UNIQUE_NAME UNIQUE (NAME)\"; expected \"., ADD, SET, RENAME, DROP,\
    \ ALTER\"; SQL statement:\nALTER TABLE COMPANY MODIFY ID INT NOT NULL AUTO_INCREMENT,\
    \ ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL, ADD CONSTRAINT UNIQUE_NAME\
    \ UNIQUE (NAME) [42001-200]\n2023-11-12 19:42:29 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY MODIFY[*] ID INT NOT NULL\
    \ AUTO_INCREMENT, ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL, ADD\
    \ CONSTRAINT UNIQUE_NAME UNIQUE (NAME)\"; expected \"., ADD, SET, RENAME, DROP,\
    \ ALTER\"; SQL statement:\nALTER TABLE COMPANY MODIFY ID INT NOT NULL AUTO_INCREMENT,\
    \ ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL, ADD CONSTRAINT UNIQUE_NAME\
    \ UNIQUE (NAME) [42001-200]\n2023-11-12 19:48:12 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY MODIFY[*] ID INT NOT NULL\
    \ AUTO_INCREMENT, ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL, ADD\
    \ CONSTRAINT NAME UNIQUE (NAME)\"; expected \"., ADD, SET, RENAME, DROP, ALTER\"\
    ; SQL statement:\nALTER TABLE COMPANY MODIFY ID INT NOT NULL AUTO_INCREMENT, ADD\
    \ PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL, ADD CONSTRAINT NAME UNIQUE\
    \ (NAME) [42001-200]\n2023-11-12 19:49:50 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY MODIFY[*] ID INT NOT NULL\
    \ AUTO_INCREMENT, ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL, ADD\
    \ UNIQUE (NAME)\"; expected \"., ADD, SET, RENAME, DROP, ALTER\"; SQL statement:\n\
    ALTER TABLE COMPANY MODIFY ID INT NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID),\
    \ MODIFY NAME VARCHAR(255) NOT NULL, ADD UNIQUE (NAME) [42001-200]\n2023-11-12\
    \ 19:49:59 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax\
    \ error in SQL statement \"ALTER TABLE COMPANY MODIFY[*] ID INT NOT NULL AUTO_INCREMENT,\
    \ ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL, ADD UNIQUE (NAME)\"\
    ; expected \"., ADD, SET, RENAME, DROP, ALTER\"; SQL statement:\nALTER TABLE COMPANY\
    \ MODIFY ID INT NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255)\
    \ NOT NULL, ADD UNIQUE (NAME) [42001-200]\n2023-11-12 19:51:32 jdbc[3]: exception\n\
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement \"ALTER\
    \ TABLE COMPANY MODIFY[*] ID INT NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID),\
    \ MODIFY NAME VARCHAR(255) NOT NULL, ADD UNIQUE (NAME)\"; expected \"., ADD, SET,\
    \ RENAME, DROP, ALTER\"; SQL statement:\nALTER TABLE COMPANY MODIFY ID INT NOT\
    \ NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID), MODIFY NAME VARCHAR(255) NOT NULL,\
    \ ADD UNIQUE (NAME) [42001-200]\n2023-11-12 19:58:31 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY ALTER COLUMN ID INT AUTO_INCREMENT\
    \ NOT NULL,[*] ADD PRIMARY KEY (ID), ALTER COLUMN NAME VARCHAR(255) NOT NULL,\
    \ ADD CONSTRAINT UNIQUE_NAME UNIQUE (NAME)\"; SQL statement:\nALTER TABLE COMPANY\
    \ ALTER COLUMN ID INT AUTO_INCREMENT NOT NULL, ADD PRIMARY KEY (ID), ALTER COLUMN\
    \ NAME VARCHAR(255) NOT NULL, ADD CONSTRAINT UNIQUE_NAME UNIQUE (NAME) [42000-200]\n\
    2023-11-12 20:00:29 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY ALTER COLUMN ID INT AUTO_INCREMENT\
    \ NOT NULL,[*] ADD PRIMARY KEY (ID)\"; SQL statement:\nALTER TABLE COMPANY ALTER\
    \ COLUMN ID INT AUTO_INCREMENT NOT NULL, ADD PRIMARY KEY (ID) [42000-200]\n2023-11-12\
    \ 20:15:01 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax\
    \ error in SQL statement \"ALTER TABLE COMPANY ALTER COLUMN ID INTEGER AUTO_INCREMENT\
    \ NOT NULL,[*] ADD PRIMARY KEY (ID)\"; SQL statement:\nALTER TABLE COMPANY ALTER\
    \ COLUMN ID INTEGER AUTO_INCREMENT NOT NULL, ADD PRIMARY KEY (ID) [42000-200]\n\
    2023-11-12 20:19:07 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY ALTER COLUMN ID INTEGER\
    \ AUTO_INCREMENT NOT NULL,[*] ADD PRIMARY KEY (ID)\"; SQL statement:\nALTER TABLE\
    \ COMPANY ALTER COLUMN ID INTEGER AUTO_INCREMENT NOT NULL, ADD PRIMARY KEY (ID)\
    \ [42000-200]\n2023-11-12 20:19:39 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Column \"ID\" must not be nullable; SQL statement:\nALTER TABLE COMPANY ADD\
    \ PRIMARY KEY (ID) [90023-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.mvstore.db.MVTable.addIndex(MVTable.java:334)\n\tat org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:151)\n\
    \tat org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\
    \tat carsharing.Main.main(Main.java:44)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-11-12 20:19:50 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Column \"ID\" must not be\
    \ nullable; SQL statement:\nALTER TABLE COMPANY ADD PRIMARY KEY (ID) [90023-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\tat\
    \ org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.mvstore.db.MVTable.addIndex(MVTable.java:334)\n\tat org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:151)\n\
    \tat org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\
    \tat carsharing.Main.main(Main.java:44)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-11-12 20:22:03 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement\
    \ \"ALTER TABLE COMPANY ALTER COLUMN NAME VARCHAR(255) NOT NULL,[*] ADD CONSTRAINT\
    \ UNIQUE_NAME UNIQUE (NAME)\"; SQL statement:\nALTER TABLE COMPANY ALTER COLUMN\
    \ NAME VARCHAR(255) NOT NULL, ADD CONSTRAINT UNIQUE_NAME UNIQUE (NAME) [42000-200]\n\
    2023-11-12 20:22:11 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY ALTER COLUMN NAME VARCHAR(255)\
    \ NOT NULL,[*] ADD CONSTRAINT UNIQUE_NAME UNIQUE (NAME)\"; SQL statement:\nALTER\
    \ TABLE COMPANY ALTER COLUMN NAME VARCHAR(255) NOT NULL, ADD CONSTRAINT UNIQUE_NAME\
    \ UNIQUE (NAME) [42000-200]\n2023-11-12 20:22:45 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY ALTER COLUMN ID INTEGER\
    \ NOT NULLADD[*] PRIMARY KEY (ID)\"; expected \"NULL\"; SQL statement:\nALTER\
    \ TABLE COMPANY ALTER COLUMN ID INTEGER NOT NULLADD PRIMARY KEY (ID) [42001-200]\n\
    2023-11-12 20:23:15 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"ALTER TABLE COMPANY ALTER COLUMN ID INTEGER\
    \ NOT NULL,[*]ADD PRIMARY KEY (ID)\"; SQL statement:\nALTER TABLE COMPANY ALTER\
    \ COLUMN ID INTEGER NOT NULL,ADD PRIMARY KEY (ID) [42000-200]\n2023-11-12 20:27:15\
    \ jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in\
    \ SQL statement \"CREATE TABLE COMPANY (ID INTEGER NOT PRIMARY_KEY[*] AUTO_INCREMENT,\
    \  NAME VARCHAR(255)) UNIQUE NOT NULL \"; expected \"NULL\"; SQL statement:\n\
    CREATE TABLE COMPANY (ID INTEGER NOT PRIMARY_KEY AUTO_INCREMENT,  NAME VARCHAR(255))\
    \ UNIQUE NOT NULL  [42001-200]\n2023-11-12 20:30:41 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"CREATE TABLE COMPANY (ID INTEGER NOT PRIMARY[*]\
    \ KEY AUTO_INCREMENT, NAME VARCHAR(255)) NOT NULL UNIQUE \"; expected \"NULL\"\
    ; SQL statement:\nCREATE TABLE COMPANY (ID INTEGER NOT PRIMARY KEY AUTO_INCREMENT,\
    \ NAME VARCHAR(255)) NOT NULL UNIQUE  [42001-200]\n2023-11-12 20:31:16 jdbc[3]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement\
    \ \"CREATE TABLE COMPANY (ID INTEGER PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(255))\
    \ NOT[*] NULL UNIQUE \"; SQL statement:\nCREATE TABLE COMPANY (ID INTEGER PRIMARY\
    \ KEY AUTO_INCREMENT, NAME VARCHAR(255)) NOT NULL UNIQUE  [42000-200]\n2023-11-12\
    \ 20:33:47 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax\
    \ error in SQL statement \"CREATE TABLE COMPANY (ID INTEGER PRIMARY KEY AUTOINCREMENT[*],\
    \ NAME VARCHAR(255) NOT NULL UNIQUE)\"; expected \"HASH, AUTO_INCREMENT, NOT,\
    \ NULL, COMMENT, CHECK, REFERENCES, ,, )\"; SQL statement:\nCREATE TABLE COMPANY\
    \ (ID INTEGER PRIMARY KEY AUTOINCREMENT, NAME VARCHAR(255) NOT NULL UNIQUE) [42001-200]\n\
    2023-11-12 21:15:43 jdbc[8]: exception\norg.h2.jdbc.JdbcSQLNonTransientException:\
    \ The result set is not scrollable and can not be reset. You may need to use conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\
    \ ..). [90128-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.jdbc.JdbcResultSet.resetResult(JdbcResultSet.java:3301)\n\
    \tat org.h2.jdbc.JdbcResultSet.beforeFirst(JdbcResultSet.java:2772)\n\tat carsharing.Main.listCompanies(Main.java:85)\n\
    \tat carsharing.Main.main(Main.java:47)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2023-11-12 21:16:19 jdbc[8]:\
    \ exception\norg.h2.jdbc.JdbcSQLNonTransientException: The result set is not scrollable\
    \ and can not be reset. You may need to use conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,\
    \ ..). [90128-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.jdbc.JdbcResultSet.resetResult(JdbcResultSet.java:3301)\n\
    \tat org.h2.jdbc.JdbcResultSet.beforeFirst(JdbcResultSet.java:2772)\n\tat carsharing.Main.listCompanies(Main.java:86)\n\
    \tat carsharing.Main.main(Main.java:47)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n"
    learner_created: true
  - name: src/carsharing/db/Service/CompanyDaoService.java
    visible: true
    text: |
      package carsharing.db.Service;
      
      import carsharing.db.Model.Company;
      
      import java.sql.Statement;
      import java.util.List;
      
      public interface CarSharingService {
          List<Company> findAll(Statement stmt);
      
          //    Developer findById(int id);
          void add(String company);
      
      //    void update(Developer developer);
      //    void deleteById(int id);
      }
    learner_created: true
  - name: src/carsharing/db/Model/Car.java
    visible: true
    learner_created: true
  - name: src/carsharing/db/Service/CarDaoService.java
    visible: true
    learner_created: true
  - name: src/carsharing/db/Service/Impl/CarDAO.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/11503#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 14 Nov 2023 14:18:33 UTC"
record: 3
